# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016. A <a href="http://kennethreitz.com/pages/open-projects.html">Kenneth Reitz</a> Project. <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">CC BY-NC-SA 3.0</a>
# This file is distributed under the same license as the pythonguide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-03-17 19:37+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Victor Caldas <caldas.victor@gmail.com>, 2017\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/own-16/teams/72945/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../dev/virtualenvs.rst:4
msgid "Virtual Environments"
msgstr "Ambientes virtuais"

#: ../../dev/virtualenvs.rst:6
msgid ""
"A Virtual Environment is a tool to keep the dependencies required by "
"different projects in separate places, by creating virtual Python "
"environments for them. It solves the \"Project X depends on version 1.x but,"
" Project Y needs 4.x\" dilemma, and keeps your global site-packages "
"directory clean and manageable."
msgstr ""
"Um Virtual Environment (Ambiente virtual) é uma ferramenta que permite "
"guardar as dependências de projetos diferentes em lugares separados criando "
"um ambiente virtual Python para cada um deles. Isso resolve problemas como "
"\"O projeto X usa uma biblioteca na versão 1.x mas o projeto Y usa essa "
"mesma biblioteca mas na versão 4.x\" e mantém os seus pacotes instalados na "
"pasta site-packages global limpa e organizada."

#: ../../dev/virtualenvs.rst:11
msgid ""
"For example, you can work on a project which requires Django 1.10 while also"
" maintaining a project which requires Django 1.8."
msgstr ""
"Por exemplo, você pode trabalhar em um projeto que usa o Django na versão "
"1.10 enquanto também poderá trabalhar em um outro projeto que use o Django "
"na versão 1.8."

#: ../../dev/virtualenvs.rst:15
msgid "virtualenv"
msgstr ""

#: ../../dev/virtualenvs.rst:17
msgid ""
"`virtualenv <http://pypi.python.org/pypi/virtualenv>`_ is a tool to create "
"isolated Python environments. virtualenv creates a folder which contains all"
" the necessary executables to use the packages that a Python project would "
"need."
msgstr ""
"`virtualenv <http://pypi.python.org/pypi/virtualenv>`_ é uma ferramenta que "
"permite criar ambientes Python isolados. O virtualenv cria uma pasta que "
"contém todos os executáveis necessários para usar os pacotes que o seu "
"projeto em Python necessita."

#: ../../dev/virtualenvs.rst:21
msgid "Install virtualenv via pip:"
msgstr "Instalação  do virtualenv via pip:"

#: ../../dev/virtualenvs.rst:28 ../../dev/virtualenvs.rst:155
msgid "Basic Usage"
msgstr "Uso"

#: ../../dev/virtualenvs.rst:30
msgid "Create a virtual environment for a project:"
msgstr "Criar um ambiente virtual para um projeto:"

#: ../../dev/virtualenvs.rst:37
msgid ""
"``virtualenv my_project`` will create a folder in the current directory "
"which will contain the Python executable files, and a copy of the ``pip`` "
"library which you can use to install other packages. The name of the virtual"
" environment (in this case, it was ``my_project``) can be anything; omitting"
" the name will place the files in the current directory instead."
msgstr ""
"O comando ``virtualenv my_project`` criará uma pasta no diretório atual que "
"contém os arquivos executáveis do Python e uma cópia da biblioteca ``pip`` "
"que você poderá usar para instalar outros pacotes. O nome do ambiente "
"virtual (nesse caso, seria ``my_project``) mas pode ser qualquer coisa; ao "
"omitir o nome do ambiente os arquivos serão copiados para a pasta local."

#: ../../dev/virtualenvs.rst:43
msgid ""
"This creates a copy of Python in whichever directory you ran the command in,"
" placing it in a folder named :file:`my_project`."
msgstr ""
"Ele cria uma cópia do Python em qualquer diretório em que você executar o "
"comando dentro de uma pasta chamada :file:`my_project`."

#: ../../dev/virtualenvs.rst:46
msgid ""
"You can also use the Python interpreter of your choice (like ``python2.7``)."
msgstr ""
"Vocẽ também poderá usar qualquer versão do interpretador Python se preferir "
"(como ``python2.7``)."

#: ../../dev/virtualenvs.rst:53
msgid ""
"or change the interpreter globally with an env variable in ``~/.bashrc``:"
msgstr ""
"ou definir o interpretador global com uma variável de ambiente no arquivo "
"``~/.bashrc``:"

#: ../../dev/virtualenvs.rst:59
msgid "To begin using the virtual environment, it needs to be activated:"
msgstr ""
"Para começar a usar o ambiente virtual, ele precisa primeiro ser ativado:"

#: ../../dev/virtualenvs.rst:65
msgid ""
"The name of the current virtual environment will now appear on the left of "
"the prompt (e.g. ``(my_project)Your-Computer:your_project UserName$)`` to "
"let you know that it's active. From now on, any package that you install "
"using pip will be placed in the ``my_project`` folder, isolated from the "
"global Python installation."
msgstr ""
"O nome do ambiente virtual atual aparecerá no lado esquerdo da linha de "
"comando (p. ex.  ``(my_project)Your-Computer:your_project UserName$)`` para "
"que você saiba qual ambiente foi ativado. A partir de agora, qualquer pacote"
" que você instalar usando o pip será instalado dentro da pasta "
"``my_project`` isolado da pasta global."

#: ../../dev/virtualenvs.rst:70
msgid "Install packages as usual, for example:"
msgstr "Instalar os pacotes como de costume, por exemplo:"

#: ../../dev/virtualenvs.rst:76
msgid ""
"If you are done working in the virtual environment for the moment, you can "
"deactivate it:"
msgstr ""
"Se você já tiver terminado de trabalhar no ambiente virtual no momento, você"
" pode desativá-lo:"

#: ../../dev/virtualenvs.rst:83
msgid ""
"This puts you back to the system's default Python interpreter with all its "
"installed libraries."
msgstr ""
"Isso faz com que você volte a versão padrão do interpretador Python do "
"sistema e todas as suas bibliotecas."

#: ../../dev/virtualenvs.rst:86
msgid ""
"To delete a virtual environment, just delete its folder. (In this case, it "
"would be ``rm -rf my_project``.)"
msgstr ""
"Para remover um ambiente virtual, simplesmente apague a pasta. (Nesse caso "
"seria ``rm -rf my_project``.)"

#: ../../dev/virtualenvs.rst:89
msgid ""
"After a while, though, you might end up with a lot of virtual environments "
"littered across your system, and its possible you'll forget their names or "
"where they were placed."
msgstr ""

#: ../../dev/virtualenvs.rst:94
msgid "Other Notes"
msgstr ""

#: ../../dev/virtualenvs.rst:96
msgid ""
"Running ``virtualenv`` with the option ``--no-site-packages`` will not "
"include the packages that are installed globally. This can be useful for "
"keeping the package list clean in case it needs to be accessed later. [This "
"is the default behavior for ``virtualenv`` 1.7 and later.]"
msgstr ""

#: ../../dev/virtualenvs.rst:101
msgid ""
"In order to keep your environment consistent, it's a good idea to \"freeze\""
" the current state of the environment packages. To do this, run"
msgstr ""

#: ../../dev/virtualenvs.rst:108
msgid ""
"This will create a :file:`requirements.txt` file, which contains a simple "
"list of all the packages in the current environment, and their respective "
"versions. You can see the list of installed packages without the "
"requirements format using \"pip list\". Later it will be easier for a "
"different developer (or you, if you need to re-create the environment) to "
"install the same packages using the same versions:"
msgstr ""

#: ../../dev/virtualenvs.rst:119
msgid ""
"This can help ensure consistency across installations, across deployments, "
"and across developers."
msgstr ""

#: ../../dev/virtualenvs.rst:122
msgid ""
"Lastly, remember to exclude the virtual environment folder from source "
"control by adding it to the ignore list."
msgstr ""

#: ../../dev/virtualenvs.rst:128
msgid "virtualenvwrapper"
msgstr ""

#: ../../dev/virtualenvs.rst:130
msgid ""
"`virtualenvwrapper "
"<https://virtualenvwrapper.readthedocs.io/en/latest/index.html>`_ provides a"
" set of commands which makes working with virtual environments much more "
"pleasant. It also places all your virtual environments in one place."
msgstr ""

#: ../../dev/virtualenvs.rst:134 ../../dev/virtualenvs.rst:146
msgid "To install (make sure **virtualenv** is already installed):"
msgstr ""

#: ../../dev/virtualenvs.rst:142
msgid ""
"(`Full virtualenvwrapper install instructions "
"<https://virtualenvwrapper.readthedocs.io/en/latest/install.html>`_.)"
msgstr ""

#: ../../dev/virtualenvs.rst:144
msgid ""
"For Windows, you can use the `virtualenvwrapper-win "
"<https://github.com/davidmarble/virtualenvwrapper-win/>`_."
msgstr ""

#: ../../dev/virtualenvs.rst:152
msgid "In Windows, the default path for WORKON_HOME is %USERPROFILE%\\Envs"
msgstr ""

#: ../../dev/virtualenvs.rst:157
msgid "Create a virtual environment:"
msgstr ""

#: ../../dev/virtualenvs.rst:163
msgid "This creates the :file:`my_project` folder inside :file:`~/Envs`."
msgstr ""

#: ../../dev/virtualenvs.rst:165
msgid "Work on a virtual environment:"
msgstr ""

#: ../../dev/virtualenvs.rst:171
msgid ""
"Alternatively, you can make a project, which creates the virtual "
"environment, and also a project directory inside ``$PROJECT_HOME``, which is"
" ``cd`` -ed into when you ``workon myproject``."
msgstr ""

#: ../../dev/virtualenvs.rst:179
msgid ""
"**virtualenvwrapper** provides tab-completion on environment names. It "
"really helps when you have a lot of environments and have trouble "
"remembering their names."
msgstr ""

#: ../../dev/virtualenvs.rst:183
msgid ""
"``workon`` also deactivates whatever environment you are currently in, so "
"you can quickly switch between environments."
msgstr ""

#: ../../dev/virtualenvs.rst:186
msgid "Deactivating is still the same:"
msgstr ""

#: ../../dev/virtualenvs.rst:192
msgid "To delete:"
msgstr ""

#: ../../dev/virtualenvs.rst:199
msgid "Other useful commands"
msgstr ""

#: ../../dev/virtualenvs.rst:202
msgid "``lsvirtualenv``"
msgstr ""

#: ../../dev/virtualenvs.rst:202
msgid "List all of the environments."
msgstr ""

#: ../../dev/virtualenvs.rst:206
msgid "``cdvirtualenv``"
msgstr ""

#: ../../dev/virtualenvs.rst:205
msgid ""
"Navigate into the directory of the currently activated virtual environment, "
"so you can browse its :file:`site-packages`, for example."
msgstr ""

#: ../../dev/virtualenvs.rst:209
msgid "``cdsitepackages``"
msgstr ""

#: ../../dev/virtualenvs.rst:209
msgid "Like the above, but directly into :file:`site-packages` directory."
msgstr ""

#: ../../dev/virtualenvs.rst:212
msgid "``lssitepackages``"
msgstr ""

#: ../../dev/virtualenvs.rst:212
msgid "Shows contents of :file:`site-packages` directory."
msgstr ""

#: ../../dev/virtualenvs.rst:214
msgid ""
"`Full list of virtualenvwrapper commands "
"<https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html>`_."
msgstr ""

#: ../../dev/virtualenvs.rst:217
msgid "virtualenv-burrito"
msgstr ""

#: ../../dev/virtualenvs.rst:219
msgid ""
"With `virtualenv-burrito <https://github.com/brainsik/virtualenv-burrito>`_,"
" you can have a working virtualenv + virtualenvwrapper environment in a "
"single command."
msgstr ""

#: ../../dev/virtualenvs.rst:223
msgid "autoenv"
msgstr ""

#: ../../dev/virtualenvs.rst:224
msgid ""
"When you ``cd`` into a directory containing a :file:`.env`, `autoenv "
"<https://github.com/kennethreitz/autoenv>`_ automagically activates the "
"environment."
msgstr ""

#: ../../dev/virtualenvs.rst:227
msgid "Install it on Mac OS X using ``brew``:"
msgstr ""

#: ../../dev/virtualenvs.rst:233
msgid "And on Linux:"
msgstr ""
